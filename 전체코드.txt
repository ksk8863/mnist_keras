
# 모듈 임포트
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import datasets
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import confusion_matrix
import seaborn as sns
sns.set(style='white')
%matplotlib inline

# 데이터 로드 및 전처리
mnist = datasets.mnist 
(x_train, y_train),(x_test, y_test) = mnist.load_data() # 학습데이터와 테스트 데이터 로드
x_train = x_train/255. # nomalization [0,1]
x_test = x_test/255. # nomalization [0,1]
ytrain = to_categorical(y_train, num_classes = 10) # one-hot encoding
ytest = to_categorical(y_test, num_classes = 10) # one-hot encoding
xtrain = x_train.reshape(60000, 28*28) # 데이터를 1차원 변환
xtest = x_test.reshape(10000,28*28) # 데이터를 1차원 변환 

# 모델 구성
Model = Sequential()
Model.add(Dense(units=256, input_shape=(28*28,), activation='sigmoid'))
Model.add(Dense(units=10, activation='softmax'))
Model.summary()

# 모델 컴파일 및 학습
Model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])
Model.fit(xtrain, ytrain, epochs=5, verbose=2)

# 모델 평가 및 예측
score = Model.evaluate(xtest, ytest, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

pred_test = Model.predict(xtest)
arg_pred_test = np.argmax(pred_test, axis=1)
plt.imshow(x_test[0],'gray')
plt.title('Predicted: {}'.format(arg_pred_test[0]))
plt.show()

matrix = confusion_matrix(y_test, arg_pred_test)
plt.figure(figsize=(6,5))
sns.heatmap(matrix, annot=True, fmt='d', cmap='Greys') 
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()
